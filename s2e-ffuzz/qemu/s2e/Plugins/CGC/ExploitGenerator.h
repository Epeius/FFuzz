///
/// Copyright (C) 2016, Dependable Systems Laboratory, EPFL
/// Copyright (C) 2015-2016, Cyberhaven, Inc
/// All rights reserved. Proprietary and confidential.
///
/// Distributed under the terms of S2E-LICENSE
///


#ifndef S2E_PLUGINS_ExploitGenerator_H
#define S2E_PLUGINS_ExploitGenerator_H

#include <s2e/Plugin.h>
#include <s2e/Plugins/CorePlugin.h>
#include <s2e/Plugins/ProcessExecutionDetector.h>
#include <s2e/Plugins/CGC/CGCMonitor.h>
#include <s2e/Plugins/CGC/Recipe/Recipe.h>
#include <s2e/Plugins/CGC/POVGenerator.h>
#include <s2e/S2EExecutionState.h>

namespace s2e {
namespace plugins {

class ExploitGenerator : public Plugin
{
    S2E_PLUGIN

private:
    CGCMonitor *m_monitor;
    recipe::Recipe *m_recipe;
    POVGenerator *m_povGenerator;
    ProcessExecutionDetector *m_process;

    uint64_t m_maxCrashCount;
    uint64_t m_crashCount;

    typedef POVGenerator::PovOptions PovOptions;
    typedef POVGenerator::PovType PovType;

    typedef std::tuple<uint64_t /* faultAddr */, unsigned /* povType */, std::string /* recipeName */> UniquePovKey;
    typedef std::map<UniquePovKey, unsigned /* count */> UniquePovMap;

    // TODO: implement proper sharing between multiple s2e processes (e.g., through KeyValueStore plugin)
    UniquePovMap m_uniquePovMap;
    unsigned m_maxPovCount;

    void onPovReadyHandler(S2EExecutionState* state, const PovOptions &opt, const std::string &recipeName, bool isCrash);
    void onSegFault(S2EExecutionState *state, uint64_t pid, uint64_t pc);

public:
    enum TestCaseType {
        POV, CRASH, END_OF_PATH, PARTIAL_PATH
    };

    void initialize();
    ExploitGenerator(S2E* s2e): Plugin(s2e) {}

    sigc::signal<void, S2EExecutionState*,
                 const PovOptions &,
                 const std::string & /* recipeName */,
                 const std::string & /* xmlFilename */,
                 const std::string & /* cFilename */,
                 TestCaseType /* tcType */> onPovReady;

};

} // namespace plugins
} // namespace s2e

#endif // S2E_PLUGINS_ExploitGenerator_H
