#!/bin/sh

print_usage() {
echo "Usage: configure options..."
echo
echo "  --with-llvm=PATH              LLVM binaries path (PATH/bin/llvm-config must exist)"
echo "  --with-klee=PATH              KLEE binaries path"
echo "  --with-libvmi-src=PATH        Path to libvmi source"
echo "  --with-libvmi-lib=PATH        Path to libvmi binaries"
echo "  --with-liblua=PATH            Path to lua binaries"
echo "  --with-z3-incdir=PATH         Z3 include directory"
echo "  --with-z3-libdir=PATH         Z3 library directory"
echo "  --enable-debug                Compile library with debug information"
echo "  --enable-s2e                  Enable S2E mode"
}

LLVM_ROOT=
DEBUG=n

for opt do
  optarg=`expr "x$opt" : 'x[^=]*=\(.*\)'`
  case "$opt" in
    #Path to LLVM directory
    --with-llvm=*)
      LLVM_ROOT="$optarg"
    ;;

    --with-klee=*)
      KLEE_ROOT="$optarg"
    ;;

    --with-libvmi-src=*)
      LIBVMI_SRC="$optarg"
    ;;

    --with-libvmi-lib=*)
      LIBVMI_LIB="$optarg"
    ;;

    --with-liblua=*)
      LIBLUA_LIB="$optarg"
    ;;

    --with-z3-incdir=*)
      Z3_INCDIR="$optarg"
    ;;

    --with-z3-libdir=*)
      Z3_LIBDIR="$optarg"
    ;;

    --enable-debug)
      DEBUG=y
    ;;

    --enable-s2e)
      ENABLE_S2E=y
    ;;

    *) echo "Unknown option $opt"
    ;;
  esac
  ARGCOUNT=$(expr $ARGCOUNT + 1)
done

if [ ! -x "$LLVM_ROOT/bin/llvm-config" ]; then
  echo "$LLVM_ROOT/bin/llvm-config does not exist"
  print_usage
  exit 1
fi

if ! echo "$CC" | grep -q clang; then
    echo "You must use clang to compile libs2e. Override the CC var if needed"
    exit 1
fi

if ! echo "$CXX" | grep -q clang++; then
    echo "You must use clang++ to compile libs2e. Override the CXX var if needed"
    exit 1
fi

if [ ! -e "$Z3_INCDIR/z3.h" ]; then
  echo "Cannot find Z3 header files in $Z3_INCIDR"
  print_usage
  exit 1
fi

if [ ! -e "$Z3_LIBDIR/libz3.a" ]; then
  echo "Cannot find Z3 library files in $Z3_LIBDIR"
  print_usage
  exit 1
fi

rm -f config.log
echo "# libs2e configured with:" >> config.log
printf " '%s'" "$0" "$@" >> config.log

BUILD_DIR="$(pwd)"
cd "$(dirname $0)"
SRC_DIR="$(pwd)"

cd "$BUILD_DIR"
ln -sf "$SRC_DIR/Makefile" Makefile

for l in libq libcoroutine libse; do
    mkdir -p $l
    cd $l
    cmake "$SRC_DIR/$l"
    cd ..
done

cat > config-host.h << EOF
/* Automatically generated by create_config - do not modify */
#define HOST_X86_64 1
#define CONFIG_POSIX 1
#define CONFIG_LINUX 1
#define CONFIG_SMBD_COMMAND "/usr/sbin/smbd"
#define CONFIG_AC97 1
#define CONFIG_ES1370 1
#define CONFIG_SB16 1
#define CONFIG_HDA 1
#define CONFIG_AUDIO_DRIVERS \
    &oss_audio_driver,\

#define CONFIG_OSS 1
#define CONFIG_BDRV_WHITELIST \
    NULL
#define CONFIG_VNC 1
#define CONFIG_VNC_TLS 1
#define CONFIG_VNC_SASL 1
#define CONFIG_VNC_JPEG 1
#define CONFIG_VNC_PNG 1
#define CONFIG_FNMATCH 1
#define CONFIG_UUID 1
#define QEMU_VERSION "1.0.50"
#define QEMU_PKGVERSION " (S2E)"
#define CONFIG_SDL 1
#define CONFIG_CURSES 1
#define CONFIG_ATFILE 1
#define CONFIG_PIPE2 1
#define CONFIG_ACCEPT4 1
#define CONFIG_SPLICE 1
#define CONFIG_EVENTFD 1
#define CONFIG_FALLOCATE 1
#define CONFIG_SYNC_FILE_RANGE 1CONFIG_SLIRP
#define CONFIG_FIEMAP 1
#define CONFIG_DUP3 1
#define CONFIG_EPOLL 1
#define CONFIG_EPOLL_CREATE1 1
#define CONFIG_EPOLL_PWAIT 1
#define CONFIG_INOTIFY 1
#define CONFIG_INOTIFY1 1
#define CONFIG_BYTESWAP_H 1
#define CONFIG_BRLAPI 1
#define CONFIG_BLUEZ 1
#define CONFIG_LINUX_AIO 1
#define CONFIG_ATTR 1
#define CONFIG_IOVEC 1
#define CONFIG_PREADV 1
#define CONFIG_FDT 1
#define CONFIG_SIGNALFD 1
#define CONFIG_FDATASYNC 1
#define CONFIG_MADVISE 1
#define CONFIG_POSIX_MADVISE 1
#define CONFIG_SMARTCARD 1
#define CONFIG_SMARTCARD_NSS 1
#define CONFIG_OPENGL 1
#define CONFIG_UNAME_RELEASE ""
#define CONFIG_RBD 1
#define CONFIG_UCONTEXT_COROUTINE 1
#define CONFIG_OPEN_BY_HANDLE 1
#define CONFIG_LINUX_MAGIC_H 1
#define CONFIG_TRACE_NOP 1
#define CONFIG_TRACE_FILE trace
#define CONFIG_TRACE_DEFAULT 1

EOF

get_git_revision() {
    CURDIR="$(pwd)"
    cd $(dirname "$0")
    git --no-pager log --pretty=format:'%H' -n 1
    cd "$CURDIR"
}

echo "#define CONFIG_DATE \"$(date)\"" >> config-host.h
echo "#define CONFIG_QEMU_DATADIR \"$BUILD_DIR\"" >> config-host.h
echo "#define QEMU_REVISION \"$(get_git_revision)\"" >> config-host.h

#################################################################
# Configuring each target
#################################################################

for target in i386-softmmu i386-s2e-softmmu i386-s2e_sp-softmmu x86_64-softmmu x86_64-s2e-softmmu x86_64-s2e_sp-softmmu; do
echo "Configuring $target"

cd "$BUILD_DIR"
mkdir -p "$target"
cd "$target"

ln -sf "$SRC_DIR/Makefile.target" Makefile

cat > config-target.h <<EOF
#define TARGET_SHORT_ALIGNMENT 2
#define TARGET_INT_ALIGNMENT 4
#define TARGET_LONG_ALIGNMENT 4
#define TARGET_LLONG_ALIGNMENT 8
#define TARGET_I386 1
#define CONFIG_NO_XEN 1
#define CONFIG_KVM 1
#define CONFIG_VHOST_NET 1
#define TARGET_PHYS_ADDR_BITS 64
#define CONFIG_SOFTMMU 1
#define CONFIG_I386_DIS 1
#define CONFIG_I386_DIS 1
EOF

ARCH="$(echo $target | cut -d '-' -f 1)"

if [ "x$ARCH" = "xi386" ]; then
  echo '#define TARGET_ARCH "i386"' >> config-target.h
  TARGET_LONG_BITS=32
elif [ "x$ARCH" = "xx86_64" ]; then
  echo '#define TARGET_ARCH "x86_64"' >> config-target.h
  echo "#define TARGET_X86_64 1" >> config-target.h
  TARGET_LONG_BITS=64
else
  echo "Invalid target $target"
  exit 1
fi

LLVM_CONFIG="$LLVM_ROOT/bin/llvm-config"

LLVM_CXXFLAGS="$($LLVM_CONFIG --cxxflags)"
LLVM_LIBS="$($LLVM_CONFIG --libs)"
LLVM_LIBS="$LLVM_LIBS $($LLVM_CONFIG --system-libs)"
LLVM_LDFLAGS="$($LLVM_CONFIG --ldflags)"

#Filter debug flags
if [ $DEBUG = "y" ]; then
   FILTER_FLAGS="-O1 -O2 -O3 -fomit-frame-pointer"
   OPTFLAGS="-O0 -g"
   BUILD_TYPE=Debug
else
   CXXFLAGS="$CXXFLAGS -g -O2"
   OPTFLAGS="-O2 -g"
   BUILD_TYPE=Release
fi


KLEE_CXXFLAGS="-I$KLEE_ROOT/include -fomit-frame-pointer -fPIC"
KLEE_LDFLAGS="-L$KLEE_ROOT/lib"
KLEE_LIBS="-lkleeCore -lkleeModule -lkleaverSolver -lkleaverExpr -lkleeSupport -lkleeBasic"

rm -f config.mak
echo "BUILD_DIR := $BUILD_DIR" >> config.mak
echo "SRC_DIR := $SRC_DIR" >> config.mak
echo "LIBVMI_SRC := $LIBVMI_SRC" >> config.mak
echo "LIBVMI_LIB := $LIBVMI_LIB" >> config.mak
echo "LIBLUA_LIB := $LIBLUA_LIB" >> config.mak
echo "Z3_INC := $Z3_INCDIR" >> config.mak
echo "Z3_LIB := $Z3_LIBDIR" >> config.mak

echo "LLVM_CXXFLAGS = \$(filter-out $FILTER_FLAGS,$LLVM_CXXFLAGS)" >> config.mak
echo "LLVM_LDFLAGS = $LLVM_LDFLAGS" >> config.mak
echo "LLVM_LIBS = \$(filter-out -lgtest -lgtest_main,$LLVM_LIBS)" >> config.mak

echo "KLEE_CXXFLAGS = \$(filter-out $FILTER_FLAGS,$KLEE_CXXFLAGS)" >> config.mak
echo "KLEE_LDFLAGS = $KLEE_LDFLAGS" >> config.mak
echo "KLEE_LIBS = $KLEE_LIBS" >> config.mak

echo "CC = $CC" >> config.mak
echo "CXX = $CXX" >> config.mak
echo "OPTFLAGS = $OPTFLAGS" >> config.mak

CMAKE_FLAGS=""
TCG_CFLAGS="-DCONFIG_SOFTMMU -DTARGET_LONG_BITS=$TARGET_LONG_BITS"

#XXX: make sure that this is in sync with cpu-defs.h
TCG_CFLAGS="$TCG_CFLAGS -DCPU_TEMP_BUF_NLONGS=128"

if echo $target | grep -q s2e; then
  echo "S2E mode activated for $target"
  echo "#define CONFIG_SYMBEX 1" >> config-target.h

  if ! echo $target | grep -q s2e_sp; then
    echo "#define CONFIG_SYMBEX_MP 1" >> config-target.h
    echo "CONFIG_SYMBEX_MP := 1" >> config.mak
  fi

  echo "SYMBEX_CONFIG = 1" >> config.mak
  echo "TARGET_ARCH := $ARCH" >> config.mak

  #XXX: S2E_ENABLE_MEM_TCGTRACING overrides s2e_qemu.h
  CMAKE_FLAGS="-DWITH_SYMBEX=ON"
fi

echo "=== Configuring libtcg... ==="
rm -rf libtcg && mkdir -p libtcg && cd libtcg
cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_C_FLAGS="$TCG_CFLAGS" -DCMAKE_CXX_FLAGS="$TCG_CFLAGS" -DLLVM_CXXFLAGS="$LLVM_CXXFLAGS" $CMAKE_FLAGS "$SRC_DIR/libtcg"
cd ..

echo "=== Configuring libcpu... ==="
rm -rf libcpu && mkdir -p libcpu && cd libcpu
cmake -DCMAKE_BUILD_TYPE=$BUILD_TYPE $CMAKE_FLAGS \
    -DLIBQ_INCLUDE_DIR="$SRC_DIR/libq/include" \
    -DLIBTCG_INCLUDE_DIR="$SRC_DIR/libtcg/include" \
    -DSEUTILS_INCLUDE_DIR="$SRC_DIR/libse/include" \
    -DHOST_INCLUDE_DIR="$(cd $(pwd)/../../ && echo $(pwd))" \
    -DTARGET_INCLUDE_DIR="$(cd $(pwd)/../ && echo $(pwd))" \
    "$SRC_DIR/libcpu"
cd ..


mkdir -p s2e s2e/Plugins s2e/Signals s2e/Plugins/Searchers s2e/Plugins/ExecutionTracers s2e/Plugins/WindowsInterceptor \
s2e/Plugins/SymbolicHardware s2e/Plugins/CGC/Recipe s2e/Plugins/Linux

done
