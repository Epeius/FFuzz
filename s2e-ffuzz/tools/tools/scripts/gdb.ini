#QEMU 1.0 generates this signal
handle SIG38 noprint

define guest2host
set $addr = ($arg0)
set $TARGET_PAGE_BITS = 12
set $SE_RAM_OBJECT_BITS = 7
set $CPU_TLB_BITS = 8

set $S2E_RAM_OBJECT_DIFF = $TARGET_PAGE_BITS - $SE_RAM_OBJECT_BITS
set $CPU_S2E_TLB_BITS = ($CPU_TLB_BITS + $TARGET_PAGE_BITS - $SE_RAM_OBJECT_BITS)
set $CPU_S2E_TLB_SIZE = (1 << $CPU_S2E_TLB_BITS)
set $CPU_TLB_SIZE = 1 << $CPU_TLB_BITS

set $object_index = $addr >> $SE_RAM_OBJECT_BITS
set $index = ($object_index >> $S2E_RAM_OBJECT_DIFF) & ($CPU_TLB_SIZE-1)
set $s2e_tlb_addr = env->s2e_tlb_table[0][$object_index & ($CPU_S2E_TLB_SIZE - 1)]
set $tlb_addr = env->tlb_table[0][$index]

p /x $tlb_addr

if ($tlb_addr->addr_read == ($addr & 0xfffff000))
set $hostaddr = $addr + $s2e_tlb_addr->addend

p /x $hostaddr
x /64b $hostaddr
x /10i $hostaddr

else
echo Address not in the TLB\n
end


end

document guest2host
guest2host <vaddr>: converts a guest virtual address to a host address
end


define dynstep
si
x /i $rip
end

document dynstep
dynstep: single-steps one assembly instruction
end

define pdyngen
set $icount = ($arg0)
set $tc_ptr = env->se_current_tb->tc_ptr
x /($icount)i $tc_ptr
end
document pdyngen
pdyngen: prints the dynamically generated code of the currently-running translation block
end

